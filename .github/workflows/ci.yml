name: Flask API CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: flask_user
          MONGO_INITDB_ROOT_PASSWORD: flaskpassword
          MONGO_INITDB_DATABASE: clients_db

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MongoDB to be ready
        run: |
          sleep 10
          docker exec $(docker ps -q -f ancestor=mongo:5.0) mongosh --username flask_user --password flaskpassword --authenticationDatabase admin --eval "db.stats()" || exit 1

      - name: Run tests
        env:
          MONGO_URI: mongodb://flask_user:flaskpassword@localhost:27017/clients_db?authSource=admin
        run: |
          PYTHONPATH=. pytest tests/

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-clients-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-clients-api:latest

          deploy:
            needs: docker-build
            runs-on: ubuntu-latest
        
            steps:
              - name: Checkout repository
                uses: actions/checkout@v3
        
              - name: Set up Kubectl
                uses: azure/setup-kubectl@v3
                with:
                  version: latest
        
              - name: Configure AWS CLI
                run: |
                  aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws configure set region us-east-1
        
              - name: Authenticate with EKS
                run: |
                  aws eks update-kubeconfig --name YOUR_EKS_CLUSTER_NAME --region us-east-1
                  kubectl config current-context
        
              - name: Get changed files
                id: changed-files
                uses: tj-actions/changed-files@v35
        
              - name: Deploy only modified manifests
                run: |
                  for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
                    if [[ $file == k8s/* ]]; then
                      echo "Applying $file"
                      kubectl apply --validate=false -f $file
                    fi
                  done
        